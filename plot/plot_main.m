function [out_data_cell, group_settings]  = ...
    plot_main(alg_settings_cell, out_data_cell, group_settings)
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% MAIN PLOT FUNCTION
%
% Brent Wallace  
%
% 2021-11-06
%
% This program, given a specified algorithm and data, plots all the
% relevant data generated by the algorithm and saves the plots.
%
% *************************************************************************
%
% CALL SYNTAX
%
% *************************************************************************
%
% plot_main(alg_settings_cell, out_data_cell, group_settings)
%
% *************************************************************************
%
% INPUTS
%
% *************************************************************************
%
% alg_settings_cell     (Cell, each entry a Struct) Algorithm 
%                       settings/parameters for subsequent execution
%                       according to desired preset (fields vary by
%                       algorithm, see respective algorithm .m-file for
%                       details).
% out_data_cell         (Cell, each entry a Struct) Output data generated
%                       by the algorithm (fields vary by algorithm, see
%                       respective algorithm .m-file for details).
% group_settings        (Struct) contains preset group settings.
%                       Has the following fields:
%   savefigs            (Boolean) 1 = save figures to PDF. 0 = don't save.
%   relpath             (String) relative file path of folder to save plots
%                       to, if they are to be saved.
%   dolegend            (Boolean) 1 = include preset group legend on plots.
%                       0 = don't include legend.
%   sys_plot_settings   (Struct) contains system plot settings. See
%                       config_sys.m for details.
%   preset_group        (String) Tag of the current preset group being
%                       executed.
%
% *************************************************************************
%
% OUTPUTS
%
% *************************************************************************
%
% 
%
% *************************************************************************
% *************************************************************************
% *************************************************************************

% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% INITIALIZATION
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Unpack plot settings
savefigs = group_settings.savefigs;
relpath = group_settings.relpath;
dolegend = group_settings.dolegend;
do_individual_plots = group_settings.do_individual_plots;
sys_plot_settings = group_settings.sys_plot_settings;

% Suppress warnings pertaining to axes text interpreter
warning('off', 'MATLAB:handle_graphics:exceptions:SceneNode');

% Number of designs to plot for
numpresets = size(alg_settings_cell,1);

% x-axis label for time plots
% tlabel = 'Time t (sec)';        % Make label
tlabel = 'Time $t$ (s)';        % Make label
group_settings.tlabel = tlabel;  % Include in plot settings

% Check if this preset group is executed as part of a group
ismultigroup = isfield(group_settings, 'ismultigroup');

% Initialize figure counter
if ismultigroup
    figcount = group_settings.figcount;
else
    figcount = 1;
end


% Create save directory if figures are to be saved
if savefigs
    if ~ismultigroup
        timestamp = make_timestamp();
        relpath = [relpath, timestamp];   % Update relative path
    end
    mkdir(relpath);                   % Create directory for relative path
end

% Update relpath field of group_settings struct to include the time stamp
% (if it was added, otherwise this line is redundant)
group_settings.relpath = relpath;


% % ***********************
% %
% % MAKE DIRECTORY OF SAVE FOLDER FOR EACH PRESET IN THE GROUP
% %  
% 
% if savefigs && do_individual_plots
% 
%     for i = 1:numpresets
% 
%         % Set relative path to save plots to for this preset
%         relpath_preset = ...
%             [   relpath, ...
%                 alg_settings_cell{i}.plot_settings.plotfolder, ...
%                 '\'     ];
% 
%         % Make directory 
%         mkdir(relpath_preset);
% 
%         % Store this relative path for later
%         alg_settings_cell{i}.plot_settings.relpath = relpath_preset;
% 
%     end
% 
% end


% ***********************
%
% MAKE LEGEND IF USER SPECIFIED
%  

if dolegend
   
    % Initialize legend
    lgnd = cell(numpresets,1);
    
    % Fill legend entries
    for i = 1:numpresets
       
        % Extract preset legend entry
        lgnd{i} = alg_settings_cell{i}.plot_settings.legend_entry;
        
    end
    
    % Store legend
    group_settings.lgnd = lgnd;
    
end


% ***********************
%
% x_0 SWEEP ONLY -- FIND INDICES OF SPECIFIED ICS TO PLOT AUXILIARY PLOTS
% FOR
%  

if group_settings.is_x0_sweep
   
    % Find the indices corresponding to the ICs to plot for
    aux_plot_x0s = group_settings.aux_plot_x0s;
    x0_cell = group_settings.x0_cell;
    numICs = group_settings.numICs;
    aux_plot_x0s_inds = -1 * ones(size(aux_plot_x0s, 1), 1);
    for i = 1:size(aux_plot_x0s, 1)
        aux_plot_x0 = aux_plot_x0s(i,:)';
        for j = 1:numICs
            x0 = x0_cell{j};
            if aux_plot_x0 == x0
                aux_plot_x0s_inds(i) = j;
            end
        end
    end
    
    % Write indices to group_settings
    group_settings.aux_plot_x0s_inds = aux_plot_x0s_inds;
    
end


%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************


%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% STATE TRAJECTORY, CONTROL SIGNAL PLOTS
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Store figure counter in plot settings to pass to function
group_settings.figcount = figcount;

figcount = plot_x_u(alg_settings_cell, out_data_cell, group_settings);

%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% ALGORITHM-SPECIFIC PLOTS
%
% E.g., NN weight parameters with respect to iteration count, etc. See
% respective algorithm plot function (e.g. plot_irl.m) for further details.
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

if do_individual_plots

    for i = 1:numpresets
        
        % Store figure counter in plot settings to pass to function
        group_settings.figcount = figcount;

        % Extract algorithm settings and output data for current preset
        alg_settings = alg_settings_cell{i};
        out_data = out_data_cell{i};

        % ***********************
        %
        % EXECUTE APPROPRIATE ALGORITHM PLOT FUNCTION
        %
        switch alg_settings.alg

            % ***********************
            %
            % DIRL
            %

            case [{'dirl_lin'};{'dirl_nonlin'};{'irl_old'}]

                figcount = ...
                    plot_irl_hsv(alg_settings, out_data, group_settings); 


            % ***********************
            %
            % NDI HSV -- WANG, STENGEL (2000) -- TRACKING
            %

            case 'irl_hsv'

                figcount = ...
                    plot_irl_hsv(alg_settings, out_data, group_settings); 




            % ***********************
            %
            % THROW ERROR IF TAG DOES NOT COME UP A MATCH
            %   

            otherwise

                %error('*** ERROR: ALGORITHM TAG NOT RECOGNIZED ***');             

        end

    end

end


%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% CALCULATE DYNAMIC FUNCTIONS AND PERFORMANCE METRICS IF IS OF THE WANG,
% STENGEL (2000) FAMILY
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Check if is part of the Wang, Stengel (2000) HSV family
if isfield(group_settings, 'is_hsv_wang_stengel')
    is_hsv_wang_stengel = group_settings.is_hsv_wang_stengel;
else
    is_hsv_wang_stengel = 0;
end

% Do additional plots if is HSV
if is_hsv_wang_stengel
    out_data_cell = hsv_wang_stengel_2000_calc...
    (alg_settings_cell, out_data_cell, group_settings); 
end


%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% ADDITIONAL PLOTS IF IS OF THE WANG, STENGEL (2000) FAMILY
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Store figure counter in plot settings to pass to function
group_settings.figcount = figcount;

if is_hsv_wang_stengel
    figcount = plot_hsv_wang_stengel_2000...
    (alg_settings_cell, out_data_cell, group_settings); 
end

%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% ADDITIONAL PLOTS IF IS WANG, STENGEL TRACKING
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Store figure counter in plot settings to pass to function
group_settings.figcount = figcount;

if strcmp(group_settings.preset_group,'ndi_wang_stengel_2000_tracking')
    figcount = plot_ndi_wang_stengel_2000_tracking...
    (alg_settings_cell, out_data_cell, group_settings); 
end



%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% ADDITIONAL PLOTS IF IS AN IC SWEEP
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Store figure counter in plot settings to pass to function
group_settings.figcount = figcount;

% if 0
if group_settings.is_x0_sweep
    figcount = ...
        plot_x0_sweep(alg_settings_cell, out_data_cell, group_settings);
end




%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% SAVE PRESET GROUP DATA TO DIRECTORY
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Store figure counter in plot settings
group_settings.figcount = figcount;

data_folder = 'data/';

if savefigs
    
    % Make directory to save data to
    relpath_data = [relpath data_folder];
    group_settings.relpath_data = relpath_data;
    mkdir(relpath_data)
    
    % Save data -- alg_settings_cell struct
    varname = 'alg_settings_cell';
    save([relpath_data varname], varname);
    
    % Save data -- out_data_cell struct
    varname = 'out_data_cell';
    save([relpath_data varname], varname);
    
    % Save data -- group_settings struct
    varname = 'group_settings';
    save([relpath_data varname], varname);
    
end

