function figcount = plot_hsv_wang_stengel_2000...
    (alg_settings_cell, out_data_cell, group_settings)
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% PLOTS FOR PITCH-AXIS HSV MODEL -- WANG, STENGEL (2000)
%
% Brent Wallace  
%
% 2022-08-13
%
% This program generates plots for control of the HSV model developed in
%
%   Q. Wang and R. F. Stengel. "Robust nonlinear control of a hypersonic
%   aircraft." AIAA J. Guid., Contr., & Dyn., 23(4):577â€“585, July 2000
%
% *************************************************************************
%
% INPUTS
%
% *************************************************************************
%
% alg_settings      (Struct) Algorithm settings/parameters corresponding to
%                   the current preset. See respective algorithm .m-file
%                   for a description of the relevant fields.
%                   NOTE: Regardless of the algorithm, alg_settings must
%                   contain the following fields:
%   group_settings   (Struct) contains plot settings for this particular
%                   preset. Has the following fields:
%       relpath     (String) Name of the folder to save plots to for this
%                   preset. This could be the preset tag, or any
%                   other convenient identifier.
% out_data          (Struct) Output data generated by the algorithm. See
%                   respective algorithm .m-file for a description of the
%                   relevant fields.
% group_settings     (Struct) contains plot settings for the program. Has
%                   the following fields which are used here:
%   savefigs        (Boolean) 1 = save figures to PDF. 0 = don't save.
%   figcount        (Integer) Cumulative figure count before this function
%                   has been called.
%
% *************************************************************************
%
% OUTPUTS
%
% *************************************************************************
%
% figcount          (Integer) Cumulative figure count after all plots in
%                   this function have been created.
%
% *************************************************************************
% *************************************************************************
% *************************************************************************

%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% INITIALIZATION
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Unpack plot settings
savefigs = group_settings.savefigs;
if savefigs
    relpath = group_settings.relpath;
end
% dolegend = group_settings.dolegend;

% Extract system and system plot settings
sys = group_settings.sys;
sys_plot_settings = group_settings.sys_plot_settings;

% Initialize figure counter
figcount = group_settings.figcount;

% x-axis label for time plots
tlabel = group_settings.tlabel;

% Extract plot time window
tsim_plot = group_settings.tsim_plot;

% Check if user desired preset-specific formatting
do_indiv_sett = isfield(group_settings, 'indiv_sett_cell');
if do_indiv_sett   
    indiv_sett_cell = group_settings.indiv_sett_cell;
end

% State trajectory x(t) unit scaling. E.g., if x_1(t) is angular
% displacement but is desired in degrees, declare the field 'sclvec' and
% put sclvec(1) = 180/pi.
x_sclvec = sys_plot_settings.x_sclvec;


% Legend for all states in one plot
x_t_state_lgd = sys_plot_settings.x_t_state_lgd;

% Properties of output variables
y_propts_cell = sys_plot_settings.y_propts_cell;


% % *************************************************************************
% %
% % CODE TO RE-PLOT DATA
% % 
% % *************************************************************************
% 
% clear
% close all
% clc
% 
% plot_settings.relpath_data = '01 data/wang_stengel_2000/100ftps/';
% plot_settings.relpath_data = '01 data/wang_stengel_2000/2000ft/';
% 
% plot_settings.savefigs = 1;
% plot_settings.relpath = '00 figures/';
% plot_settings.do_individual_plots = 1;
% 
% re_plot(plot_settings);


% *************************************************************************
% *************************************************************************
%
% EXTRACT MODEL DATA
%
% *************************************************************************
% *************************************************************************

% System
sys = group_settings.sys;             % System array
n = sys.n;                          % System order
m = sys.m;                          % System input dimension
model = sys.model;                  % System model

% Extract system parameters
mref = model.mref;
g = model.g;

% Degree/radian conversions
D2R = pi/180;
R2D = 180/pi;


% Index variables (i.e., where each state is in x)
indV = 1;
indg = 2;
indh = 3;
inda = 4;
indq = 5;
inddT = 6;
indddT = 7;
indVI = 8;
indhI = 9;

% Index variables (i.e., where each control is in [xv u])
inddTc = 8;
inddE = 9;


% Initial velocity, altitude
x0 = group_settings.x0;
V0 = x0(indV);
h0 = x0(indh);

% Trim conditions
xe = model.trimconds.xe_dE;

% *************************************************************************
% *************************************************************************
%
% PREPARE FOR MAIN LOOP
%
% *************************************************************************
% *************************************************************************

% Number of presets executed
numpresets = group_settings.numpresets;


% Check if more than one preset is being executed. If so, create legend
dolgd = numpresets > 1;

% Check if original or modified controller is being executed
has_int_aug = group_settings.has_int_aug;

% Get legend entries
lgd_p = group_settings.lgd_p;


% Store figure counter before looping
figcount_begin = figcount;

% Indices of output variables tracked
inds_xr = group_settings.inds_xr;

% ***********************
%       
% PREPARE LEGENDS, COUNTERS
%   

% Model linear (=1) or nonlinear (=0)
lin1nonlin0vec = group_settings.lin1nonlin0vec;

% % Plant model MP (=1) or NMP (=0)
% Pmp1nmp0vec = group_settings.Pmp1nmp0vec;
% 
% % Controller design that for MP plant (=1) or NMP plant (=0)
% Kmp1nmp0vec = group_settings.Kmp1nmp0vec;

% Algorithm is NDI (=1) or not NDI (=0)
ndi1notndi0vec = group_settings.ndi1notndi0vec;

% Do prefilter (=1) or not (=0)
has_pf = isfield(group_settings, 'pf1nopf0vec');
if has_pf
    pf1nopf0vec = group_settings.pf1nopf0vec;
end

% Check if at least one of the designs uses a prefilter
if has_pf
    has_pf = sum(pf1nopf0vec) > 0;
end
if has_pf
    minindpf = min(find(pf1nopf0vec));
end

% Prepare legend for nonlinear plant presets
inds_nonlin = find(~lin1nonlin0vec);
num_nonlin = sum(~lin1nonlin0vec);
lgd_nonlin = cell(num_nonlin,1);
if do_indiv_sett
    indiv_sett_cell_nonlin = cell(num_nonlin,1);
end
for i = 1:num_nonlin
    ind = inds_nonlin(i);
    lgd_nonlin{i} = alg_settings_cell{ind}.plot_settings.legend_entry;
    if do_indiv_sett
        indiv_sett_cell_nonlin{i} = indiv_sett_cell{ind};
    end
end

% Prepare legend for NDI presets
inds_ndi = find(ndi1notndi0vec);
num_ndi = sum(ndi1notndi0vec);
lgd_ndi = cell(num_ndi,1);
if do_indiv_sett
    indiv_sett_cell_ndi = cell(num_ndi,1);
end
for i = 1:num_ndi
    ind = inds_ndi(i);
    lgd_ndi{i} = alg_settings_cell{ind}.plot_settings.legend_entry;
    if do_indiv_sett
        indiv_sett_cell_ndi{i} = indiv_sett_cell{ind};
    end    
end

% Get filtered reference commands if any of the methods use a prefilter
if has_pf
    indspf = out_data_cell{minindpf}.inds.indspf;
    rfiltmat = out_data_cell{minindpf}.xmat(:,indspf);
    tvecrfilt = out_data_cell{minindpf}.tvec;
end


% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN LOOP
%
% Loop over the presets in the group
%
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Begin counters which keep track of nonlinear and NDI presets
cnt_nonlin = 0;
cnt_ndi = 0;

for presetcount = 1:numpresets

% *************************************************************************
% *************************************************************************
%
% INIT
%
% *************************************************************************
% *************************************************************************

% Reset figure counter
figcount = figcount_begin;

% Get current alg_settings struct
alg_settings = alg_settings_cell{presetcount};

% Get current out_data struct
out_data = out_data_cell{presetcount};

% ***********************
%       
% PRESET SETTINGS
%   

% Model linear (=1) or nonlinear (=0)
lin1nonlin0 = alg_settings.lin1nonlin0;

% % Plant model MP (=1) or NMP (=0)
% Pmp1nmp0 = alg_settings.Pmp1nmp0;
% 
% % Controller design that for MP plant (=1) or NMP plant (=0)
% Kmp1nmp0 = alg_settings.Kmp1nmp0;

% Algorithm is NDI (=1) or not NDI (=0)
ndi1notndi0 = alg_settings.ndi1notndi0;

% If model nonlinear, increment counter
if ~lin1nonlin0
    cnt_nonlin = cnt_nonlin + 1;
end

% If alg NDI, increment counter
if ~lin1nonlin0
    cnt_ndi = cnt_ndi + 1;
end


% *************************************************************************
% *************************************************************************
%
% UNPACK ALGORITHM OUTPUT DATA
%
% See respective algorithm .m-file for details of 'out_data' struct fields.
%
% *************************************************************************
% *************************************************************************

tvec = out_data.tvec;
xmat = out_data.xmat;
umat = out_data.umat;

inds = out_data.inds;

rtmat = out_data.rtmat;

qinfvec = out_data.qinfvec; 
rhovec = out_data.rhovec;
Mvec = out_data.Mvec;
Lvec = out_data.Lvec;
Dvec = out_data.Dvec;
Tvec = out_data.Tvec;
Myyvec = out_data.Myyvec;

if ~lin1nonlin0
    fgvec = out_data.fgvec;
    kvec = out_data.kvec;
end

if ndi1notndi0
    detGstarvec = out_data.detGstarvec;
    detGstaruvec = out_data.detGstaruvec;
    detGstaraerovec = out_data.detGstaraerovec;
    condGstarvec = out_data.condGstarvec;
end

LDvec = out_data.LDvec;

Nvec = out_data.Nvec;
loadvec = out_data.loadvec;

if ~lin1nonlin0
    sumFLvec = out_data.sumFLvec;
    sumFDvec = out_data.sumFDvec;
end


% Velocity, altitude data
Vvec = out_data.Vvec;
hvec = out_data.hvec;

% FPA, AOA, pitch data
% alphavec = out_data.alphavec;
% gammavec = out_data.gammavec;
thetavec = out_data.thetavec;

% Reference command data
yrmat = out_data.yrmat;

% Output data
ymat = out_data.ymat;

% Tracking error data
emat = out_data.emat;


%%
% *************************************************************************
% *************************************************************************
% *************************************************************************
%
% BEGIN MAIN
% 
% *************************************************************************
% *************************************************************************
% *************************************************************************


% *************************************************************************
% *************************************************************************
%
% PLOT: PITCH
%
% *************************************************************************
% *************************************************************************

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, thetavec); 
title('Pitch $\theta$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\theta(t)$ (deg)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['thetat'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOTS: PERTAINING TO OUTPUT RESPONSES y_i(t) 
%
% *************************************************************************
% *************************************************************************

for ycnt = 1:m

% ***********************
%
% GET PROPERTIES OF CURRENT OUTPUT VARIABLE
%

ind_xri = inds_xr(ycnt);

y_propts = y_propts_cell{ycnt};
currvarname = y_propts.varname;
currtexname = y_propts.texname;
currengname = y_propts.engname;
currunits = y_propts.units;
currscl = x_sclvec(ind_xri);

% Formatting 
currtexnamer = [currtexname '_{r}'];
currtexname_eqn = ['$' currtexname '$'];
currtexname_eqnt = ['$' currtexname '(t)$'];
currtexname_eqnr = ['$' currtexnamer '$'];
currtexname_eqnrt = ['$' currtexnamer '(t)$'];
currtexname_eqnrft = ['$' currtexname '_{r,filt}(t)$'];

% Current state variable title, axis label
ttl_x = sys_plot_settings.x_t_title{ind_xri};
ylabel_x = sys_plot_settings.x_t_ylabel{ind_xri};

% ***********************
%
% GET OUTPUT, TRACKING ERROR
%

yvec = xmat(:,ind_xri);
yrvec = yrmat(:,ycnt);
evec = emat(:,ycnt);


% *************************************************************************
%
% PLOT: OUTPUT y_i(t) -- SHIFTED TO TRIM
%
% *************************************************************************

y0 = xe(ind_xri);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, currscl*(yvec-y0)); 
if presetcount == numpresets

    ttl = ttl_x;
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = ylabel_x;
    ylabel(ylbl);

   
    lgd = lgd_p;
    legend(lgd)

    if do_indiv_sett
        indiv_sett_cell_tmp = indiv_sett_cell;
    end


    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_tmp;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = [currvarname 't_xe'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
%
% PLOT: OUTPUT y_i(t) AND REFERENCE COMMAND y_{r,i}(t)
%
% *************************************************************************

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, currscl*yvec); 
if presetcount == numpresets
    h_fig = plot(tvec, currscl*yrvec); 
    if has_pf
        h_fig = plot(tvecrfilt, currscl*rfiltmat(:,ycnt));
    end

    ttl = [currengname ' ' currtexname_eqn ' and Ref. ' ...
        currengname ' '  currtexname_eqnr];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = [currtexname_eqnt ', ' currtexname_eqnrt ' (' currunits ')'];
    ylabel(ylbl);


    if has_pf
        lgd = cell(numpresets+2,1);
    else
        lgd = cell(numpresets+1,1);
    end
    for i = 1:numpresets
        lgd{i} = [currtexname_eqnt ' ' lgd_p{i}];
    end
    lgd{numpresets+1} = currtexname_eqnrt;
    if has_pf
        lgd{numpresets+2} = currtexname_eqnrft;
    end

    legend(lgd)

    if do_indiv_sett
        indiv_sett_cell_tmp = indiv_sett_cell;
        indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        if has_pf
            indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        end
    end


    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_tmp;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = [currvarname 't' currvarname 'rt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
%
% PLOT: OUTPUT y_i(t) AND REFERENCE COMMAND y_{r,i}(t) -- SHIFTED TO TRIM
%
% *************************************************************************

y0 = xe(ind_xri);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, currscl*(yvec-y0)); 
if presetcount == numpresets
    h_fig = plot(tvec, currscl*(yrvec-y0)); 
    if has_pf
        h_fig = plot(tvecrfilt, currscl*(rfiltmat(:,ycnt)-y0));
    end

    ttl = [currengname ' ' currtexname_eqn ' and Ref. ' ...
        currengname ' '  currtexname_eqnr];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = [currtexname_eqnt ', ' currtexname_eqnrt ' (' currunits ')'];
    ylabel(ylbl);

    if has_pf
        lgd = cell(numpresets+2,1);
    else
        lgd = cell(numpresets+1,1);
    end
    for i = 1:numpresets
        lgd{i} = [currtexname_eqnt ' ' lgd_p{i}];
    end
    lgd{numpresets+1} = currtexname_eqnrt;
    if has_pf
        lgd{numpresets+2} = currtexname_eqnrft;
    end
    legend(lgd)

    if do_indiv_sett
        indiv_sett_cell_tmp = indiv_sett_cell;
        indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        if has_pf
            indiv_sett_cell_tmp = [indiv_sett_cell_tmp; {{}}];
        end
    end


    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_tmp;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = [currvarname 't' currvarname 'rt_xe'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
%
% PLOT: TRACKING ERROR y_i(t) - y_{r,i}(t)
%
% *************************************************************************

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, -currscl*evec); 

if presetcount == numpresets

    ttl = [currengname ' Tracking Error $e_{' currtexname '} = ' ...
    currtexnamer ' - ' currtexname '$'];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = ['$e_{' currtexname '}(t)$ (' currunits ')'];
    ylabel(ylbl);

    % Add legend if both plant types are being plotted
    if dolgd 
        legend(lgd_p);
    end

    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['e' currvarname 't'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
%
% PLOT: INTEGRAL ERROR
%
% *************************************************************************


if has_int_aug

zvec = xmat(:,inds.indsz(1)+ycnt-1);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, -zvec); 

if presetcount == numpresets

    ttl = ['Integral ' currengname ' Error $'...
        'z_{' currtexname '} = \int_{0}^{t}(' currtexnamer ...
        ' - ' currtexname ')dt$'];
    title(ttl); 
    xlabel(tlabel); 
    xlim([0 tsim_plot]);
    ylbl = ['$z_{' currtexname '}(t)$'];
    ylabel(ylbl);
    
    % Add legend if both plant types are being plotted
    if dolgd 
        legend(lgd_p);
    end

    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['z' currvarname 't'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1; 

end




end





% *************************************************************************
% *************************************************************************
%
% PLOT: DYNAMIC PRESSURE
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, qinfvec); 
title('Dynamic Pressure $\overline{q}$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\overline{q}$ (lb/ft$^2$)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['qinft'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: AIR DENSITY
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, rhovec); 
title('Air Density $\rho$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\rho(t)$ (lb/ft$^2$)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['rhot'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: MACH NUMBER
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, Mvec); 
title('Mach Number $M$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$M(t)$');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['Mt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: LIFT
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, Lvec); 
title('Lift $L$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$L(t)$ (lb)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['Lt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: DRAG
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, Dvec); 
title('Drag $D$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$D(t)$ (lb)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['Dt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: LIFT/DRAG RATIO
%
% *************************************************************************
% *************************************************************************

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, LDvec); 
title('Lift-to-Drag Ratio $L/D = C_{L}/C_{D}$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$L(t)/D(t)$');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['LDt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: NORMAL LOAD FACTOR
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, loadvec); 
title('Normal Load Factor $N/m$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$N(t)/m$ ($g$)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['loadt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: THRUST
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, Tvec); 
title('Thrust $T$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$T(t)$ (lb)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['Tt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: SUM OF LIFT-AXIS FORCES
%
% *************************************************************************
% *************************************************************************

if ~lin1nonlin0

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, sumFLvec); 
title('Lift Axis Forces $\sum F_{L} = T \sin \alpha + L - f_{g} \cos \gamma$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\sum F_{L}$ (lb)');

% legend(lgd);

% Add legend if both plant types are being plotted
if cnt_nonlin == num_nonlin && dolgd 
    legend(lgd_nonlin);
end

if cnt_nonlin == num_nonlin
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_nonlin;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['sumFLt'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: SUM OF DRAG-AXIS FORCES
%
% *************************************************************************
% *************************************************************************

if ~lin1nonlin0

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, sumFDvec); 
title('Drag Axis Forces $\sum F_{D} = T \cos \alpha - D - f_{g} \sin \gamma$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\sum F_{D}$ (lb)');

% legend(lgd);

% Add legend if both plant types are being plotted
if cnt_nonlin == num_nonlin && dolgd 
    legend(lgd_nonlin);
end

if cnt_nonlin == num_nonlin
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_nonlin;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['sumFDt'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: COMMANDED THROTTLE SETTING VS ACTUAL THROTTLE SETTING
%
% *************************************************************************
% *************************************************************************

dTcomvec = umat(:,1);
dTvec = xmat(:,inddT);

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, dTcomvec, tvec, dTvec); 
title('Ref. Throttle $\delta_{Tcom}$ vs. Actual Throttle $\delta_{T}$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\delta_{T,com}(t), \delta_{T}(t)$');


if presetcount == numpresets
    if ~dolgd
        lgd = {'$\delta_{T,com}$', '$\delta_{T}$'};
    else
        lgd = cell(2*numpresets,1);
        for i = 1:numpresets
           lgd{2*i-1} = ['$\delta_{T,com}$ ' lgd_p{i}];
           lgd{2*i} = ['$\delta_{T}$ ' lgd_p{i}];
        end
    end
    legend(lgd)
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    plot_format(p_sett); 
    
    % SAVE PLOT
    if savefigs
        filename = ['dTcomt_vs_dTt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% % % *************************************************************************
% % % *************************************************************************
% % %
% % % PLOT: COMMANDED THROTTLE SETTING VS ACTUAL THROTTLE SETTING -- ZOOMED IN
% % %
% % % *************************************************************************
% % % *************************************************************************
% % 
% % lgd = {'$\delta_{T,com}$', '$\delta_{T}$'};
% % 
% % % PLOT
% % figure(figcount)
% % h_fig = plot(tvec, umat(:,1), tvec, xmat(:,6)); 
% % title('Commanded Throttle $\delta_{T,com}$ vs. Actual Throttle $\delta_{T}$'); 
% % xlabel(tlabel); 
% % % ylabel('$L(t)/D(t)$');
% % ylim([0.1 0.7]);
% % % ylim([0.175 0.2]);
% % 
% % legend(lgd);
% % 
% % % Format plot
% % p_sett.figcount = figcount;
% % plot_format(p_sett); 
% % 
% % % SAVE PLOT
% % if savefigs
% %     filename = ['dTcomt_vs_dTt_orig_params_zoomed_in'];
% %     savepdf(figcount, relpath, filename); 
% % end
% % 
% % % Increment figure counter
% % figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: PITCHING MOMENT
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, Myyvec); 
title('Pitching Moment $\mathcal{M}$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$\mathcal{M}(t)$ (lb-ft)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['Myyt'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: AIRSPEED CHANGE V - V*
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, Vvec-V0); 
title('Airspeed Change $V - V(0)$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$V(t) - V(0)$ (ft/s)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['VtmV0'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: ALTITUDE CHANGE h - h*
%
% *************************************************************************
% *************************************************************************


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, hvec-h0); 
title('Altitude Change $h - h(0)$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$h(t) - h(0)$ (ft)');

% Add legend if both plant types are being plotted
if presetcount == numpresets && dolgd 
    legend(lgd_p);
end

if presetcount == numpresets
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['htmh0'];
        savepdf(figcount, relpath, filename); 
    end
end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: TERM IN det(G*) -- 
%       T_{\delta_{T}} * \ddot{\delta}_{Tcom} * \ddot{\alpha}_{\delta_{E}}
%
% *************************************************************************
% *************************************************************************

if ndi1notndi0

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, detGstaruvec); 
title('Term in $|G^{*}(x)|$: $T_{\delta_{T}} \ddot{\delta}_{Tcom} \ddot{\alpha}_{\delta_{E}}$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
% ylabel('$h(t) - h(0)$ (ft)');

% Add legend if both plant types are being plotted
if cnt_ndi == num_ndi && dolgd 
    legend(lgd_ndi);
end

if cnt_ndi == num_ndi
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_ndi;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['detGstarut'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: TERM IN det(G*) -- T + L_\alpha cos(\alpha) + D_\alpha sin(\alpha)
%
% *************************************************************************
% *************************************************************************

if ndi1notndi0


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, detGstaraerovec); 
title('Term in $|G^{*}(x)|$: $T + L_{\alpha} \cos \alpha + D_{\alpha} \sin \alpha$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
% ylabel('$h(t) - h(0)$ (ft)');

% Add legend if both plant types are being plotted
if cnt_ndi == num_ndi && dolgd 
    legend(lgd_ndi);
end

if cnt_ndi == num_ndi
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_ndi;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['detGstaraerot'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: det(G*)
%
% *************************************************************************
% *************************************************************************

if ndi1notndi0

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, detGstarvec); 
title('$|G^{*}(x)|$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$|G^{*}(x(t))|$');

% Add legend if both plant types are being plotted
if cnt_ndi == num_ndi && dolgd 
    legend(lgd_ndi);
end

if cnt_ndi == num_ndi
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_ndi;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['detGstart'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;


% *************************************************************************
% *************************************************************************
%
% PLOT: cond(G*)
%
% *************************************************************************
% *************************************************************************

if ndi1notndi0

% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, condGstarvec); 
title('cond$(G^{*}(x))$'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('cond$(G^{*}(x(t)))$');

% Add legend if both plant types are being plotted
if cnt_ndi == num_ndi && dolgd 
    legend(lgd_ndi);
end

if cnt_ndi == num_ndi
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_ndi;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['condGstart'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;

% *************************************************************************
% *************************************************************************
%
% PLOT: k(x) USED IN THRUST CALCULATION
%
% *************************************************************************
% *************************************************************************

if ~lin1nonlin0


% PLOT
figure(figcount)
hold on;
h_fig = plot(tvec, kvec); 
title('Term $k(x)$ used in Thrust $T$ Calculation'); 
xlabel(tlabel); 
xlim([0 tsim_plot]);
ylabel('$k(x)$');

% Add legend if both plant types are being plotted
if cnt_nonlin == num_nonlin && dolgd 
    legend(lgd_nonlin);
end

if cnt_nonlin == num_nonlin
    % Format plot
    p_sett.figcount = figcount;
    if do_indiv_sett
        p_sett.indiv_sett_cell = indiv_sett_cell_nonlin;
    end
    plot_format(p_sett); 
    clear p_sett;
    
    % SAVE PLOT
    if savefigs
        filename = ['kxvt'];
        savepdf(figcount, relpath, filename); 
    end
end

end

% Increment figure counter
figcount = figcount + 1;




end                     % END MAIN LOOP


% *************************************************************************
% *************************************************************************
%
% END MAIN LOOP
%
% *************************************************************************
% *************************************************************************


